import "model/UserSequence.mgl" as docMgl
id info.scce.cinco.product.features
stylePath "model/Features.style"

@primeviewer
@generatable("info.scce.cinco.product.userdocumentation.codegen.Generate", "/src/")
graphModel FeaturesGraphModel {
	iconPath "icons/16/feature_16.png"
	diagramExtension "feat"
	containableElements(*)
	attr EString as name
}

@icon("icons/16/start_16.png")
node StartNode {
	style StartNode
	outgoingEdges (*[1,1])
}

@icon("icons/16/stop_16.png")
node EndNode{
	style EndNode
	incomingEdges ({Edge,LabeledEdge}[1,*])
}

@icon("icons/16/container_16.png")
container FeatureContainer {
	style grayContainer("${title}")
	containableElements(*)
	attr EString as title := ""
	incomingEdges (*[1,*])
	outgoingEdges ({Edge,LabeledEdge}[1,*])
}

/* Basic URL node, which will be called in the Selenium script*/
@icon("icons/16/url_16.png")
node BaseURL {
	style url("URL: ", "${content}")
	attr EString as content := "http://localhost"
}

/* The Domain node is suppose to contain
 * the site's reverse domain for defining packages;
 * this node might be reference in other MGLs.
 */
@icon("icons/16/domain_16.png")
node Domain{
	style url("Reverse domain: ", "${content}")
	attr EString as content := "com.example"
}

/* Input node*/
@icon("icons/16/gear_16.png")
node KeyValue {
	style keyValue("${key}: ", "${value}")
	attr EString as value := "value"
	attr EString as key := "key"
}


node DocNode{
	style docNode("${mgl.modelName}")
	prime docMgl::UserSequenceGraphModel as mgl
	attr EBoolean as createScreenshots := true
	incomingEdges (*[1,*])
	outgoingEdges ({Edge,LabeledEdge}[1,*])
}

edge Edge {
	style simpleArrow
}

edge LabeledEdge {
	style labeledArrow("${label}")
	attr EString as label
}