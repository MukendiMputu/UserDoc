import "model/UserSequence.mgl" as userSeq

id info.scce.cinco.product.pages
stylePath "model/Page.style"

/* 
 * All the model elements that will contain
 * the configuration for the target web site.
 * 
 * e.g. URL, username, password, etc.
 * */
@generatable("info.scce.cinco.product.userdocumentation.codegen.PageClassGenerator", "/src/")
graphModel PageGraphModel {
	iconPath "icons/16/page_16.png"
	diagramExtension "page"
	containableElements(*)
	attr EString as name := "Page"
	attr EString as URL := "page"
	attr EBoolean as hasLogin
}

@icon("icons/16/start_16.png")
@palette("Basic Elements")
node Begin {
	style start
	outgoingEdges (LabeledConnection[1,1], Connection[1,1])
}

@icon("icons/16/stop_16.png")
@palette("Basic Elements")
node End {
	style end
	incomingEdges (LabeledConnection[1,1], Connection[1,1])
}

/* To model all the subpages within a page
  */
@icon("icons/16/page_16.png")
node SubPage {
	style page("${subPage.name}: ", "${subPage.URL}")
	prime this::PageGraphModel as subPage
	incomingEdges (LabeledConnection[1,1], Connection[1,1])
	outgoingEdges (LabeledConnection[1,1], Connection[1,1])
}

/*
 * To model all the user sequences/actions that
 * can be perform on a page
 */
node UserSequence {
	style page("${sequence.modelName}","")
	prime userSeq::UserSequenceGraphModel as sequence
	incomingEdges (LabeledConnection[1,1], Connection[1,1])
	outgoingEdges (LabeledConnection[1,1], Connection[1,1])
}

/*---------------------------------------------------------------------------- */

edge Connection {
	style simpleArrow
}

edge LabeledConnection {
	style labeledArrow("${label}")
	attr EString as label
}
