id info.scce.cinco.product.usersequence.main
stylePath "model/Doc.style"

@mcam("check")
graphModel DocGraphModel {
	iconPath "icons/16/sequence_16.png"
	diagramExtension "doc"
	containableElements(
		StartNode [1,1],
		EndNode [1,1],
		SubDoc [0,*],
		Screenshot [1,*],
		Navigation [1,*],
		WebElement [0,*],
		SectionNode [1,*],
		Comment[1, *]
	)
	attr EString as modelName := "UserSequence"
}

@icon("icons/16/start_16.png")
@palette("Basic Elements")
node StartNode {
	style startNode
	outgoingEdges (Transition[1,1])
}

@icon("icons/16/stop_16.png")
@palette("Basic Elements")
node EndNode {
	style endNode
	incomingEdges (Transition[1,1])
}

/*======================== STRUCTURAL ELEMENTS ======================== */

@icon("icons/16/action_16.png")
@doubleClickAction("info.scce.cinco.product.userdocumentation.action.DocNodeOpenSubmodel")
node SubDoc {
	style subDocNode("${subDoc.modelName}.doc")
	prime this::DocGraphModel as subDoc
	attr EBoolean as createScreenshots := true
	incomingEdges (Transition[1,1])
	outgoingEdges (Transition[1,1])
}

@disable(resize)
@palette("Selenium Actions")
@icon("icons/16/screenshot_16.png")
node Screenshot {
	style screenshotNode
	incomingEdges (Transition[1,1], Anchor[1,*])
	outgoingEdges (Transition[1,*])
	attr EString as pictureName
	attr Comment as description
}

@palette("Selenium Actions")
@icon("icons/16/screenshot_16.png")
node Navigation {
	style navigationNode("${link}")
	incomingEdges (Transition[1,1], Anchor[0,*])
	outgoingEdges (Transition[1,*])
	attr EString as link := "http://example.com"
}

@disable(resize)
@palette("Selenium Actions")
@icon("icons/16/timer_16.png")
node Timer {
	style timerNode
	incomingEdges (Transition[1,1])
	outgoingEdges (Transition[1,1])
	attr EString as cssSelector := ""
	attr Condition as condition := "presenceOfElementLocated"
}

enum Condition {
	presenceOfElementLocated
	presenceOfAllElementsLocatedBy
	elementToBeClickable
	elementToBeSelected
	frameToBeAvailableAndSwitchToIt
	invisibilityOfElementLocated
	visibilityOfAllElementsLocatedBy
	visibilityOfElementLocated
}


/*======================== WEB ELEMENTS ======================== */

/*
 * WebElement literally represents an html element.
 * It's intended to define only the most used web 
 * element (h1, h2, div, p, textarea) or custom elements
 * like <dime id="..."  >
 */
@icon("icons/16/object_16.png")
@palette("Web Elements")
node WebElement {
	style object("WebElement: ${selector}:${value}")
	attr EString as selector := "id"
	attr EBoolean as highlighted
	@multiLine
	attr EString as documenation := "Lorem ipsum dolor et si met."
	
	incomingEdges (Transition[1,1])
	outgoingEdges (Transition[1,1])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Div extends WebElement {
	style object("<div>")
	incomingEdges (Transition[1,1])
	outgoingEdges (Transition[1,1])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node H extends WebElement {
	style textBlock("${content}")
	attr EInt as ranking
	attr EString as content
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node P extends WebElement {
	style textBlock("${content}")
	attr EString as content
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Span extends WebElement {
	style textBlock("${content}")
	attr EString as content
	
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Label extends WebElement {
	style textBlock("${content}")
	attr EString as content
	
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
container Form extends WebElement {
	style formNode("Form")
	containableElements(
		Input [1,*],
		Button [1,3]
	)
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Input extends WebElement {
	style inputNode("Input: ${content}")
	attr EString as content
	incomingEdges (Transition[0,*])
	outgoingEdges (Transition[0,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Textarea extends WebElement {
	style inputNode("${content}")
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Button extends WebElement {
	style buttonNode("${content}")
	attr EString as content
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node SelectBox extends WebElement {
	style selectBoxNode("New SelectBox")
	attr EString as content
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node SelectBoxOption extends WebElement {
	style selectOptionNode("New SelectBoxOption")
	attr EString as content
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Table extends WebElement {
	style tableNode("New Table")
	
	attr EString as content
	/*attr SelectBoxAction as action*/
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node TableHead extends WebElement {
	style tableChildElementNode("New Table Head")
	
	attr EString as content
	/*attr SelectBoxAction as action*/
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Th extends WebElement {
	style tableChildElementNode("Table Header")
	
	attr EString as content
	/*attr SelectBoxAction as action*/
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node TableRow extends WebElement {
	style tableChildElementNode("Table Row")
	
	attr EString as content
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node TableBody extends WebElement {
	style tableChildElementNode("Table Body")
	
	attr EString as content
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node TableData extends WebElement {
	style tableChildElementNode("Table Data")
	
	attr EString as content
	incomingEdges (Transition[1,*])
	outgoingEdges (Transition[1,*])
}

/* */
@icon("icons/16/section_16.png")
@palette("Container Elements")
container SectionNode {
	style sectionNode("${title}")
	attr EString as title := "New Section"
	containableElements(
		WebElement [0,*],
		SubDoc [0,*],
		Navigation [0,*],
		Comment[0,*],
		Screenshot [0,*]
	)
	incomingEdges (Transition[1,1], Anchor[0,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/comment_16.png")
@palette("Semantic Elements")
node Comment {
	style commentNode("${content}")
	@multiLine
	attr EString as content
	attr Screenshot as referenceTo
	outgoingEdges (Anchor[1,*])
}

/*======================== TRANSITION ELEMENTS ======================== */

edge Transition {
	style simpleArrow
}

edge Anchor {
	style commentArrow
}
