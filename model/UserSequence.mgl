id info.scce.cinco.product.usersequence.main
stylePath "model/UserSequence.style"

@generatable("info.scce.cinco.product.userdocumentation.codegen.Generate2", "/src-gen/")
graphModel UserSequenceGraphModel {
	iconPath "icons/16/sequence_16.png"
	diagramExtension "doc"
	containableElements(*)
	attr EString as modelName := "UserSequence"
}

@icon("icons/16/start_16.png")
@palette("Basic Elements")
node Start {
	style start
	outgoingEdges (LabeledTransition[1,1], Transition[1,1])
}

@icon("icons/16/stop_16.png")
@palette("Basic Elements")
node Stop {
	style end
	incomingEdges (LabeledTransition[1,1], Transition[1,1])
}

/*======================== STRUCTURAL ELEMENTS ======================== */

/*
 * Definition of the graphical element of an action goto
 */
@icon("icons/16/action_16.png")
@doubleClickAction("info.scce.cinco.product.userdocumentation.action.DocNodeOpenSubmodel")
node SubSequence {
	style actionNode("${subSequence.modelName}.doc")
	prime this::UserSequenceGraphModel as subSequence
	attr EBoolean as createScreenshots := true
	incomingEdges (*[1,1])
	outgoingEdges (LabeledTransition[1,1], Transition[1,1])
}

/*
 * 
*/
@disable(resize)
@palette("Selenium Actions")
@icon("icons/16/screenshot_16.png")
node Screenshot {
	style screenshot
	incomingEdges (LabeledTransition[1,1], Transition[1,1], Anchor[1,*])
	outgoingEdges (Transition[1,*])
	attr EString as pictureName
	attr Comment as description
}

/*
* 
*/
@disable(resize)
@palette("Selenium Actions")
@icon("icons/16/screenshot_16.png")
node Navigation {
	style navigation("${link}")
	incomingEdges (LabeledTransition[1,1], Transition[1,1], Anchor[1,*])
	outgoingEdges (Transition[1,*])
	attr EString as link
}

/*======================== WEB ELEMENTS ======================== */


/*
 * WebElement literally represents an html element.
 * It's intended to define only the most used web 
 * element (h1, h2, div, p, textarea) or custom elements
 * like <dime id="..."  >
 */
@icon("icons/16/object_16.png")
@palette("Web Elements")
node WebElement {
	style object("WebElement: ${selector}:${value}")
	attr EString as selector := "id"
	attr EString as value := ""
	attr EBoolean as Highlighted
	
	incomingEdges (*[1,1])
	outgoingEdges (Transition[1,1])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Div extends WebElement {
	style object("<div>")
	incomingEdges (*[1,1])
	outgoingEdges (Transition[1,1])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node H extends WebElement {
	style textBlock("${content}")
	attr EInt as ranking
	attr EString as content
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node P extends WebElement {
	style textBlock("${content}")
	attr EString as content
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Span extends WebElement {
	style textBlock("${content}")
	attr EString as content
	
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Label extends WebElement {
	style textBlock("${content}")
	attr EString as content
	
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Form extends WebElement {
	style actionNode("")
	
	attr EString as action
	attr EString as method
	attr Input as field [0,*]
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Input extends WebElement {
	style input("Input: ${content}")
	attr EString as content
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Textarea extends WebElement {
	style input("${content}")
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Button extends WebElement {
	style button("${content}")
	attr EString as content
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}


enum ButtonNodeAction {
	submit delete button reset
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node SelectBox extends WebElement {
	style actionNode("")
	attr EString as content
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node SelectBoxOption extends WebElement {
	style actionNode("")
	attr EString as content
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Table extends WebElement {
	style actionNode("")
	
	attr EString as content
	/*attr SelectBoxAction as action*/
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node TableHead extends WebElement {
	style actionNode("")
	
	attr EString as content
	/*attr SelectBoxAction as action*/
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node Th extends WebElement {
	style actionNode("")
	
	attr EString as content
	/*attr SelectBoxAction as action*/
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node TableRow extends WebElement {
	style actionNode("")
	
	attr EString as content
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node TableBody extends WebElement {
	style actionNode("")
	
	attr EString as content
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

@icon("icons/16/object_16.png")
@palette("Web Elements")
node TableData extends WebElement {
	style actionNode("")
	
	attr EString as content
	incomingEdges (*[1,*])
	outgoingEdges ({Transition, LabeledTransition}[1,*])
}

/* */
@icon("icons/16/section_16.png")
@palette("Container Elements")
container SectionNode {
	style sectionNode("${title}")
	attr EString as title := ""
	containableElements(*)
	incomingEdges (LabeledTransition[1,1], Transition[1,1], Anchor[1,*])
	outgoingEdges (Transition[1,*])
}

@icon("icons/16/comment_16.png")
@palette("Semantic Elements")
node Comment {
	style commentNode("${content}")
	@multiLine
	attr EString as content
	attr Screenshot as referenceTo
	outgoingEdges (Anchor[1,*])
}

/*======================== TRANSITION ELEMENTS ======================== */

edge Transition {
	style simpleArrow
}

edge LabeledTransition {
	style labeledArrow("${label}")
	attr EString as label
}

edge Anchor {
	style commentLine
}
