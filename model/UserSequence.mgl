id info.scce.cinco.product.usersequence
stylePath "model/UserSequence.style"

//@generatable("info.scce.cinco.product.userdocumentation.codegen.Generate2", "/src/")
graphModel UserSequenceGraphModel {
	iconPath "icons/16/sequence_16.png"
	diagramExtension "sequence"
	containableElements(*)
	attr EString as modelName := ""
}

@icon("icons/16/start_16.png")
@palette("Basic Elements")
node Start {
	style start
	outgoingEdges (LabeledTransition[1,1], Transition[1,1])
}

@icon("icons/16/stop_16.png")
@palette("Basic Elements")
node Stop {
	style end
	incomingEdges (LabeledTransition[1,1], Transition[1,1])
}

@icon("icons/16/container_16.png")
@palette("Basic Elements")
container FeatureContainer {
	style divContainer("${title}")
	containableElements(*)
	attr EString as title
	incomingEdges (*[1,*])
	outgoingEdges (LabeledTransition[1,1], Transition[1,1])
}

/*
 * This model specification allows
 * the definition of common user action.
 * E.g. goto (for following links to other pages),
 * press or click action, etc.
 */
@disable(resize)
@icon("icons/16/screenshot_16.png")
node Screenshot {
	style screenshot
	incomingEdges (LabeledTransition[1,1], Transition[1,1], Anchor[1,*])
	outgoingEdges (Transition[1,*])
	
	attr Comment as description
}


/*
 * Definition of the graphical element of an action goto
 */

@icon("icons/16/action_16.png")
@palette("User Action")
node GoTo {
	style goToVerb("${verb}: ${URL}")

	incomingEdges (*[1,1])
	outgoingEdges (Transition)
	final attr EString as verb := "goToPage"
	attr EString as URL := ""
}

/*
 * Definition of the graphical element of an action goto
 */
@icon("icons/16/click_16.png")
@palette("User Action")
node Press {
	style verb("${verb}")
	
	incomingEdges (*[1,1])
	outgoingEdges (Transition)
	final attr EString as verb := "press"
	attr WebElement as obj
}

/*
 * Definition of the graphical element of an action goto
 */
@icon("icons/16/click_16.png")
@palette("User Action")
node Click {
	style verb("${verb}")
	
	incomingEdges (*[1,1])
	outgoingEdges (Transition[1,1])
	final attr EString as verb := "click"
	attr WebElement as obj
}

/*
 * Definition of the graphical element of an action goto
 */
@icon("icons/16/action_16.png")
@palette("User Action")
node Select {
	style verb("${verb}")
	
	incomingEdges (*[1,1])
	outgoingEdges (LabeledTransition[1,1], Transition[1,1])
	final attr EString as verb := "select"
	attr WebElement as obj
}

/*
 * Definition of the graphical element of an action goto
 */
@icon("icons/16/action_16.png")
@palette("User Action")
node Enter {
	style verb("${verb}")
	
	incomingEdges (*[1,1])
	outgoingEdges (LabeledTransition[1,1], Transition[1,1])
	@disable
	final attr EString as verb := "enter"
}

/*
 * Definition of the graphical element of an action goto
 */
@icon("icons/16/action_16.png")
@palette("User Action")
node Sequence {
	style actionNode("${subSequence.modelName}.sequence")
	prime this::UserSequenceGraphModel as subSequence
	incomingEdges (*[1,1])
	outgoingEdges (LabeledTransition[1,1], Transition[1,1])
}

/*
 * Definition of the graphical element of an action goto
 */
@icon("icons/16/action_16.png")
@palette("User Action")
node Check {
	style verb("${verb}")
	
	incomingEdges (*[1,1])
	outgoingEdges (LabeledTransition[1,1], Transition[1,1])
	final attr EString as verb := "check"
	attr WebElement as obj
}

/*
 * Definition of the graphical element of an action goto
 */
@icon("icons/16/action_16.png")
@palette("User Action")
node Submit {
	style verb("${verb}")
	
	incomingEdges (*[1,1])
	outgoingEdges (LabeledTransition[1,1], Transition[1,1])
	final attr EString as verb := "submit"
	attr WebElement as obj
}

/*
 * Definition of the graphical element of an action goto
 */
@icon("icons/16/action_16.png")
@palette("User Action")
node Clear {
	style verb("${verb}")
	
	incomingEdges (Transition[1,1])
	outgoingEdges (Transition[1,1])
	final attr EString as verb := "clear"
	attr WebElement as obj
}

/*
 * WebElement literally represents an html element.
 * It's intended to define only the most used web 
 * element (h1, h2, div, p, textarea) or custom elements
 * like <dime id="..."  >
 */
@icon("icons/16/object_16.png")
@palette("Web Elements")
node WebElement {
	style object("<${tagName}>: ${attribute}=${attrValue}")
	
	attr EString as tagName := ""
	attr EString as attribute := "id"
	attr EString as attrValue := ""
	attr EString as contentText := ""
	attr EBoolean as isHighlighted
	
	incomingEdges (*[1,1])
	outgoingEdges (Transition[1,1])
}


/*
 * WebElement literally represents an html element.
 * It's intended to define only the most used web 
 * element (h1, h2, div, p, textarea) or custom elements
 * like <dime id="..."  >
 */
@icon("icons/16/object_16.png")
@palette("Web Elements")
container Div extends WebElement {
	style object("<div>")
	containableElements(WebElement)
}

/*
 * User defined type to represent HTML element attributes
 */
@label(name)
type Attributes {
	attr AttributeNames as name
	attr EString as value := ""
}

/*
 * Enumeration of attributes that control the visual
 * aspect of the web element.
 * Subject to completion
 */
enum AttributeNames {
	Id
	autofocus
	background
	bgcolor
	border
	border
	color
	disabled
	href
	value
}

@icon("icons/16/comment_16.png")
@palette("Semantic Elements")
node Comment {
	style commentNode("${content}")
	@multiLine
	attr EString as content
	attr Screenshot as referenceTo
	outgoingEdges (Anchor[1,*])
}

/*---------------------------------------------------------------------------- */

edge Transition {
	style simpleArrow
}

edge LabeledTransition {
	style labeledArrow("${label}")
	attr EString as label
}

edge Anchor {
	style commentLine
}
