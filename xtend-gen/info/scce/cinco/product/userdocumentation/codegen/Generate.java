package info.scce.cinco.product.userdocumentation.codegen;

import de.jabc.cinco.meta.core.utils.EclipseFileUtils;
import de.jabc.cinco.meta.plugin.generator.runtime.IGenerator;
import graphmodel.Node;
import info.scce.cinco.product.site.site.Page;
import info.scce.cinco.product.site.site.SiteGraphModel;
import info.scce.cinco.product.userdocumentation.codegen.MavenStructureGenerator;
import info.scce.cinco.product.userdocumentation.codegen.PackageGenerator;
import info.scce.cinco.product.userdocumentation.codegen.PomXMLGenerator;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Example class that generates code for a given FlowGraph model. As different
 *  feature examples might or might not be included (e.g. the external component
 *  library or swimlanes), this generator only does stupidly enumerate all
 *  nodes and prints some general information about them.
 */
@SuppressWarnings("all")
public class Generate implements IGenerator<SiteGraphModel> {
  private IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
  
  private IProject project;
  
  @Override
  public void generate(final SiteGraphModel model, final IPath targetDir, final IProgressMonitor monitor) {
    boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(model.getModelName());
    if (_isNullOrEmpty) {
      throw new RuntimeException("Model\'s name cannot be empty!");
    }
    final String modelName = model.getModelName();
    this.project = this.root.getContainerForLocation(targetDir).getProject();
    PomXMLGenerator.generateCode(this.project);
    MavenStructureGenerator.generateMavenStructure(this.project, monitor);
    final String[] pkgs = { "config", "main", "pages", "site", "tool" };
    final String mainPackagePrefix = "/src/main/java/info/scce/cinco/product/userdocgenerator/";
    for (final String pkg : pkgs) {
      PackageGenerator.generatePkg((mainPackagePrefix + pkg), this.project, monitor);
    }
    final String testPackagePrefix = "/src/test/java/info/scce/cinco/product/userdocgenerator/";
    PackageGenerator.generatePkg((testPackagePrefix + "test"), this.project, monitor);
    final CharSequence config = this.generateConfigurationFile(model);
    final IFile configFile = this.project.getFile((mainPackagePrefix + "config/config.properties"));
    EclipseFileUtils.writeToFile(configFile, config);
    IFile _file = this.project.getFile(".classpath");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<classpath>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry kind=\"src\" output=\"target/classes\" path=\"src/main/java\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<attributes>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"optional\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"maven.pomderived\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</attributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</classpathentry>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry excluding=\"**\" kind=\"src\" output=\"target/classes\" path=\"src/main/resources\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<attributes>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"maven.pomderived\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</attributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</classpathentry>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry kind=\"src\" output=\"target/test-classes\" path=\"src/test/java\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<attributes>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"test\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"optional\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"maven.pomderived\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</attributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</classpathentry>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry excluding=\"**\" kind=\"src\" output=\"target/test-classes\" path=\"src/test/resources\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<attributes>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"test\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"maven.pomderived\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</attributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</classpathentry>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<attributes>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"module\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"maven.pomderived\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</attributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</classpathentry>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry kind=\"con\" path=\"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<attributes>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<attribute name=\"maven.pomderived\" value=\"true\"/>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</attributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</classpathentry>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<classpathentry kind=\"output\" path=\"target/classes\"/>");
    _builder.newLine();
    _builder.append("</classpath>");
    _builder.newLine();
    EclipseFileUtils.writeToFile(_file, _builder);
    IFile _file_1 = this.project.getFile(".project");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder_1.newLine();
    _builder_1.append("<projectDescription>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("<name>");
    String _last = IterableExtensions.<String>last(((Iterable<String>)Conversions.doWrapArray(this.project.getName().split("/"))));
    _builder_1.append(_last, "\t");
    _builder_1.append("</name>");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("\t");
    _builder_1.append("<comment></comment>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("<projects>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("</projects>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("<buildSpec>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("<buildCommand>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("<name>org.eclipse.jdt.core.javabuilder</name>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("<arguments>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("</arguments>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("</buildCommand>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("<buildCommand>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("<name>org.eclipse.m2e.core.maven2Builder</name>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("<arguments>");
    _builder_1.newLine();
    _builder_1.append("\t\t\t");
    _builder_1.append("</arguments>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("</buildCommand>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("</buildSpec>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("<natures>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("<nature>org.eclipse.jdt.core.javanature</nature>");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("<nature>org.eclipse.m2e.core.maven2Nature</nature>");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("</natures>");
    _builder_1.newLine();
    _builder_1.append("</projectDescription>");
    _builder_1.newLine();
    EclipseFileUtils.writeToFile(_file_1, _builder_1);
    IFile _file_2 = this.project.getFile((mainPackagePrefix + "pages/Page.java"));
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("package info.scce.cinco.product.userdocgenerator.pages;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("import info.scce.cinco.product.userdocgenerator.tool.AutomationClass;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("public class Page {");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public static AutomationClass driverTool;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("protected String sPageURL, sBrowserName, sClassName;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public Boolean openPage() {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("return true;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("public Boolean closePage() {");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    _builder_2.append("return true;");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    EclipseFileUtils.writeToFile(_file_2, _builder_2);
    IFile _file_3 = this.project.getFile((mainPackagePrefix + "site/Site.java"));
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("package info.scce.cinco.product.userdocgenerator.site;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("import java.io.FileInputStream;");
    _builder_3.newLine();
    _builder_3.append("import java.io.FileNotFoundException;");
    _builder_3.newLine();
    _builder_3.append("import java.util.Properties;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("public class Site {");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.newLine();
    {
      EList<? extends Node> _nodes = model.getNodes();
      for(final Node node : _nodes) {
        _builder_3.append("\t");
        _builder_3.append("public String s");
        String _firstUpper = StringExtensions.toFirstUpper(node.eClass().getName());
        _builder_3.append(_firstUpper, "\t");
        _builder_3.append(";");
        _builder_3.newLineIfNotEmpty();
      }
    }
    _builder_3.append("\t");
    _builder_3.append("public Properties props;");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public Site() {");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("try {");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("// Try loading the properties from config.properties file");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("props = new Properties();");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("FileInputStream fis = new FileInputStream(\"");
    IPath _fullPath = configFile.getFullPath();
    _builder_3.append(_fullPath, "\t\t\t");
    _builder_3.append("\");");
    _builder_3.newLineIfNotEmpty();
    _builder_3.append("\t\t\t");
    _builder_3.append("props.load(fis);");
    _builder_3.newLine();
    _builder_3.append("\t\t\t\t\t\t\t\t");
    _builder_3.newLine();
    {
      EList<? extends Node> _nodes_1 = model.getNodes();
      for(final Node node_1 : _nodes_1) {
        _builder_3.append("\t\t\t");
        _builder_3.append("s");
        String _firstUpper_1 = StringExtensions.toFirstUpper(node_1.eClass().getName());
        _builder_3.append(_firstUpper_1, "\t\t\t");
        _builder_3.append(" = props.getProperty(\"");
        String _lowerCase = node_1.eClass().getName().toLowerCase();
        _builder_3.append(_lowerCase, "\t\t\t");
        _builder_3.append("\");");
        _builder_3.newLineIfNotEmpty();
      }
    }
    _builder_3.append("\t\t\t");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("} catch (FileNotFoundException e) {");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("e.printStackTrace();");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("} catch (Exception e) {");
    _builder_3.newLine();
    _builder_3.append("\t\t\t");
    _builder_3.append("e.printStackTrace();");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.newLine();
    {
      EList<? extends Node> _nodes_2 = model.getNodes();
      for(final Node node_2 : _nodes_2) {
        _builder_3.append("\t");
        _builder_3.append("public String gets");
        String _firstUpper_2 = StringExtensions.toFirstUpper(node_2.eClass().getName());
        _builder_3.append(_firstUpper_2, "\t");
        _builder_3.append("() {");
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("\t");
        _builder_3.append("\t");
        _builder_3.append("return s");
        String _firstUpper_3 = StringExtensions.toFirstUpper(node_2.eClass().getName());
        _builder_3.append(_firstUpper_3, "\t\t");
        _builder_3.append(";");
        _builder_3.newLineIfNotEmpty();
        _builder_3.append("\t");
        _builder_3.append("}");
        _builder_3.newLine();
        _builder_3.append("\t");
        _builder_3.newLine();
      }
    }
    _builder_3.append("}");
    _builder_3.newLine();
    EclipseFileUtils.writeToFile(_file_3, _builder_3);
    IFile _file_4 = this.project.getFile((((mainPackagePrefix + "site/") + modelName) + ".java"));
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("package info.scce.cinco.product.userdocgenerator.site;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("import java.io.FileInputStream;");
    _builder_4.newLine();
    _builder_4.append("import java.io.FileNotFoundException;");
    _builder_4.newLine();
    _builder_4.append("import java.util.Properties;");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("public class ");
    _builder_4.append(modelName);
    _builder_4.append(" extends Site {");
    _builder_4.newLineIfNotEmpty();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("// The pages of our website");
    _builder_4.newLine();
    {
      EList<Page> _pages = model.getPages();
      for(final Page page : _pages) {
        _builder_4.append("\t");
        _builder_4.append("public ");
        String _name = page.eClass().getName();
        _builder_4.append(_name, "\t");
        _builder_4.append(" ");
        String _firstLower = StringExtensions.toFirstLower(page.eClass().getName());
        _builder_4.append(_firstLower, "\t");
        _builder_4.append(";");
        _builder_4.newLineIfNotEmpty();
      }
    }
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public ");
    _builder_4.append(modelName, "\t");
    _builder_4.append("() {");
    _builder_4.newLineIfNotEmpty();
    {
      EList<Page> _pages_1 = model.getPages();
      for(final Page page_1 : _pages_1) {
        _builder_4.append("\t\t");
        String _firstUpper_4 = StringExtensions.toFirstUpper(page_1.eClass().getName());
        _builder_4.append(_firstUpper_4, "\t\t");
        _builder_4.append(" = new ");
        String _name_1 = page_1.eClass().getName();
        _builder_4.append(_name_1, "\t\t");
        _builder_4.append("(sBrowserName, sSiteURL);");
        _builder_4.newLineIfNotEmpty();
      }
    }
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public Boolean Login() {");
    _builder_4.newLine();
    _builder_4.append("\t\t");
    _builder_4.append("return loginPage.Login(this.getsUserName(), this.getsPassword());");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("public void CloseSite() {");
    _builder_4.newLine();
    {
      EList<Page> _pages_2 = model.getPages();
      for(final Page page_2 : _pages_2) {
        _builder_4.append("\t\t");
        String _firstLower_1 = StringExtensions.toFirstLower(page_2.eClass().getName());
        _builder_4.append(_firstLower_1, "\t\t");
        _builder_4.append(".closePage();");
        _builder_4.newLineIfNotEmpty();
      }
    }
    _builder_4.append("\t");
    _builder_4.append("}");
    _builder_4.newLine();
    _builder_4.append("}");
    _builder_4.newLine();
    EclipseFileUtils.writeToFile(_file_4, _builder_4);
    IFile _file_5 = this.project.getFile((mainPackagePrefix + "tool/AutomationClass.java"));
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("package info.scce.cinco.product.userdocgenerator.tool;");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("import java.io.File;");
    _builder_5.newLine();
    _builder_5.append("import java.io.IOException;");
    _builder_5.newLine();
    _builder_5.append("import org.openqa.selenium.By;");
    _builder_5.newLine();
    _builder_5.append("import org.openqa.selenium.Keys;");
    _builder_5.newLine();
    _builder_5.append("import org.openqa.selenium.WebDriver;");
    _builder_5.newLine();
    _builder_5.append("import org.openqa.selenium.WebElement;");
    _builder_5.newLine();
    _builder_5.append("import org.openqa.selenium.OutputType;");
    _builder_5.newLine();
    _builder_5.append("import org.apache.commons.io.FileUtils;");
    _builder_5.newLine();
    _builder_5.append("import org.openqa.selenium.TakesScreenshot;");
    _builder_5.newLine();
    _builder_5.append("import org.openqa.selenium.JavascriptExecutor;");
    _builder_5.newLine();
    _builder_5.append("import org.openqa.selenium.firefox.FirefoxDriver;");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("public class AutomationClass {");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("protected WebDriver driver;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("protected String sBrowserName;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("protected WebElement element;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public AutomationClass() {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("driver = null;");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("sBrowserName = null;");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("element = null;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Boolean openBrowser(String sBrowserType) {");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("// Set path to driver executable as system path");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("if (sBrowserType.equalsIgnoreCase(\"firefox\")) {");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("System.setProperty(\"webdriver.gecko.driver\", \"/home/mukendi/opt/WebDriver/bin/geckodriver\");");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("driver = new FirefoxDriver();");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("driver.manage().window().maximize();");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return true;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Boolean goToPage(String sSiteURL) {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("driver.get(sSiteURL);");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return true;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Boolean takePageScreenshot(String folderName, String pictureName) throws IOException {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("//Use TakesScreenshot method to capture screenshot");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("TakesScreenshot screenshot = (TakesScreenshot)driver;");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("File source = screenshot.getScreenshotAs(OutputType.FILE);");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("FileUtils.copyFile(source, new File(\"./\"+folderName+\"/\" + pictureName + \".png\"));");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return true;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Boolean takeElementScreenshot(WebElement pElement, String folderName, String pictureName) throws IOException {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("//Capture single element screenshot");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("File source = pElement.getScreenshotAs(OutputType.FILE);");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("FileUtils.copyFile(source, new File(\"./\"+folderName+\"/\" + pictureName + \".png\"));");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return true;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public void highlightElement(WebElement elem) {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("JavascriptExecutor jsExec = (JavascriptExecutor) driver;");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("jsExec.executeScript(\"arguments[0].setAttribute(\'style\',\'border: 2px solid red;\');\", elem);");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Boolean typeIn(String elementID, String contentText) {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("WebElement inputField = driver.findElement(By.id(elementID));");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("highlightElement(inputField);");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("inputField.sendKeys(contentText + Keys.TAB);");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return true;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public Boolean pressEnter(){");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("WebElement enterBtn = driver.findElement(By.xpath(\"//button[@type=\'submit\']\"));");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("highlightElement(enterBtn);");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("enterBtn.click();;");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("return true;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("public void closeBrowser() {");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("driver.quit();");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.append("}");
    _builder_5.newLine();
    EclipseFileUtils.writeToFile(_file_5, _builder_5);
    IFile _file_6 = this.project.getFile((testPackagePrefix + "test/SmokeTest.java"));
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("package info.scce.cinco.product.userdocgenerator.test;");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("import org.testng.Assert;");
    _builder_6.newLine();
    _builder_6.append("import org.testng.annotations.AfterMethod;");
    _builder_6.newLine();
    _builder_6.append("import org.testng.annotations.BeforeMethod;");
    _builder_6.newLine();
    _builder_6.append("import org.testng.annotations.Test;");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("import info.scce.cinco.product.userdocgenerator.site.");
    _builder_6.append(modelName);
    _builder_6.append(";");
    _builder_6.newLineIfNotEmpty();
    _builder_6.newLine();
    _builder_6.append("public class SmokeTest {");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("Boolean bResult = false;");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append(modelName, "\t");
    _builder_6.append(" site; ");
    _builder_6.newLineIfNotEmpty();
    _builder_6.append("\t");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("@BeforeMethod");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("public void beforeMethod() {");
    _builder_6.newLine();
    _builder_6.append("\t\t");
    _builder_6.append("site = new ");
    _builder_6.append(modelName, "\t\t");
    _builder_6.append("();");
    _builder_6.newLineIfNotEmpty();
    _builder_6.append("\t");
    _builder_6.append("}");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("@Test");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("public void testCallFunction() throws InterruptedException {");
    _builder_6.newLine();
    _builder_6.append("\t\t");
    _builder_6.append("bResult =  site.Login();");
    _builder_6.newLine();
    _builder_6.append("\t\t");
    _builder_6.append("Thread.sleep(3000);");
    _builder_6.newLine();
    _builder_6.append("\t\t");
    _builder_6.newLine();
    _builder_6.append("\t\t");
    _builder_6.append("Assert.assertTrue(bResult, \"Login failed\");");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("}");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("@AfterMethod");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("public void afterMethode() {");
    _builder_6.newLine();
    _builder_6.append("\t\t");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("}");
    _builder_6.newLine();
    _builder_6.append("}");
    _builder_6.newLine();
    EclipseFileUtils.writeToFile(_file_6, _builder_6);
  }
  
  private CharSequence generateConfigurationFile(final SiteGraphModel model) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<? extends Node> _nodes = model.getNodes();
      for(final Node node : _nodes) {
        String _lowerCase = node.eClass().getName().toLowerCase();
        _builder.append(_lowerCase);
        _builder.append(" = ");
        String _string = node.eAllContents().toString();
        _builder.append(_string);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private void generatePageJavaClasses(final SiteGraphModel model, final String pkgPrefix) {
    EList<Page> _pages = model.getPages();
    for (final Page page : _pages) {
      String _firstUpper = StringExtensions.toFirstUpper(page.eClass().getName());
      String _plus = ((pkgPrefix + "pages/") + _firstUpper);
      String _plus_1 = (_plus + ".java");
      IFile _file = this.project.getFile(_plus_1);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package info.scce.cinco.product.userdocgenerator.pages;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ");
      String _firstUpper_1 = StringExtensions.toFirstUpper(page.eClass().getName());
      _builder.append(_firstUpper_1);
      _builder.append(" extends Page {");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public ");
      String _firstUpper_2 = StringExtensions.toFirstUpper(page.eClass().getName());
      _builder.append(_firstUpper_2, "\t");
      _builder.append("(String sBrowserName, String sSiteURL) {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("driverTool.openBrowser(sBrowserName);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Boolean openPage() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("driverTool.goToPage(sPageURL);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return true;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Boolean closePage() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("driverTool.closeBrowser();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return true;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      EclipseFileUtils.writeToFile(_file, _builder);
    }
  }
}
